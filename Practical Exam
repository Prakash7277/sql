CREATE TABLE ACCOUNT (
    accno INT PRIMARY KEY CHECK (accno < 100),
    open_date DATE NOT NULL,
    acctype CHAR(1) NOT NULL CHECK (acctype IN ('P', 'J')),
    balance DECIMAL(10, 2) NOT NULL CHECK (balance >= 0)
);

CREATE TABLE CUSTOMER (
    cust_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL,
    accno INT NOT NULL,
    FOREIGN KEY (accno) REFERENCES ACCOUNT(accno)
);

CREATE TABLE TRANSACTION (
    trans_id INT PRIMARY KEY,
    trans_date DATE NOT NULL,
    cno INT NOT NULL,
    trans_type CHAR(1) NOT NULL CHECK (trans_type IN ('C', 'D')),
    amount DECIMAL(10, 2) NOT NULL CHECK (amount > 0),
    FOREIGN KEY (cno) REFERENCES CUSTOMER(cust_id)
);

-- ACCOUNT
INSERT INTO ACCOUNT VALUES
(1, '2023-01-10', 'P', 150000),
(2, '2022-12-01', 'J', 250000),
(3, '2023-03-05', 'P', 50000),
(4, '2023-04-10', 'P', 300000),
(5, '2023-06-15', 'J', 100000),
(6, '2023-07-20', 'P', 180000),
(7, '2023-08-25', 'J', 220000),
(8, '2023-09-30', 'P', 120000),
(9, '2023-11-01', 'P', 70000),
(10, '2023-12-05', 'J', 300000);

-- CUSTOMER
INSERT INTO CUSTOMER VALUES
(101, 'Alice', 'Pune', 1),
(102, 'Bob', 'Mumbai', 2),
(103, 'Charlie', 'Nashik', 3),
(104, 'David', 'Delhi', 4),
(105, 'Eva', 'Nagpur', 5),
(106, 'Frank', 'Mumbai', 6),
(107, 'Grace', 'Goa', 7),
(108, 'Helen', 'Pune', 8),
(109, 'Ivan', 'Delhi', 9),
(110, 'Jane', 'Surat', 10);

-- TRANSACTION
INSERT INTO TRANSACTION VALUES
(1001, '2024-01-01', 101, 'C', 10000),
(1002, '2024-01-02', 102, 'D', 5000),
(1003, '2024-01-03', 103, 'C', 20000),
(1004, '2024-01-04', 104, 'D', 10000),
(1005, '2024-01-05', 105, 'C', 30000),
(1006, '2024-01-06', 106, 'D', 15000),
(1007, '2024-01-07', 107, 'C', 12000),
(1008, '2024-01-08', 108, 'D', 4000),
(1009, '2024-01-09', 109, 'C', 25000),
(1010, '2024-01-10', 110, 'D', 8000);


SELECT C.*
FROM CUSTOMER C
JOIN ACCOUNT A ON C.accno = A.accno
WHERE A.acctype = 'P' AND A.balance < 200000;


SELECT C.*
FROM CUSTOMER C
JOIN ACCOUNT A ON C.accno = A.accno
WHERE A.acctype = 'J';



CREATE TRIGGER trg_PreventLowBalance
ON TRANSACTION
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @trans_type CHAR(1), @amount DECIMAL(10,2), @cno INT, @accno INT, @balance DECIMAL(10,2);

    SELECT @trans_type = trans_type, @amount = amount, @cno = cno
    FROM inserted;

    SELECT @accno = accno FROM CUSTOMER WHERE cust_id = @cno;
    SELECT @balance = balance FROM ACCOUNT WHERE accno = @accno;

    IF @trans_type = 'D'
    BEGIN
        IF (@balance - @amount) < 300
        BEGIN
            RAISERROR('Insufficient balance. Minimum ₹300 must be maintained.', 16, 1);
            RETURN;
        END
    END

    -- Proceed with insert
    INSERT INTO TRANSACTION (trans_id, trans_date, cno, trans_type, amount)
    SELECT trans_id, trans_date, cno, trans_type, amount FROM inserted;

    -- Update account balance
    IF @trans_type = 'C'
        UPDATE ACCOUNT SET balance = balance + @amount WHERE accno = @accno;
    ELSE
        UPDATE ACCOUNT SET balance = balance - @amount WHERE accno = @accno;
END;




CREATE PROCEDURE AddTransaction
    @trans_id INT,
    @trans_date DATE,
    @cno INT,
    @trans_type CHAR(1),
    @amount DECIMAL(10,2)
AS
BEGIN
    DECLARE @accno INT, @balance DECIMAL(10,2);

    SELECT @accno = accno FROM CUSTOMER WHERE cust_id = @cno;
    SELECT @balance = balance FROM ACCOUNT WHERE accno = @accno;

    IF @trans_type = 'D' AND (@balance - @amount) < 300
    BEGIN
        RAISERROR('Cannot withdraw. Minimum balance ₹300 required.', 16, 1);
        RETURN;
    END

    INSERT INTO TRANSACTION (trans_id, trans_date, cno, trans_type, amount)
    VALUES (@trans_id, @trans_date, @cno, @trans_type, @amount);

    IF @trans_type = 'C'
        UPDATE ACCOUNT SET balance = balance + @amount WHERE accno = @accno;
    ELSE
        UPDATE ACCOUNT SET balance = balance - @amount WHERE accno = @accno;
END;



-- Sample Entry with validations
DECLARE @new_accno INT = 11;
DECLARE @new_balance DECIMAL(10,2) = 10000;
DECLARE @new_type CHAR(1) = 'P';  -- P or J
DECLARE @new_date DATE = GETDATE();

-- Validate accno
IF @new_accno >= 100
    RAISERROR('Account number must be less than 100', 16, 1);
ELSE IF @new_type NOT IN ('P', 'J')
    RAISERROR('Account type must be P or J', 16, 1);
ELSE IF @new_balance < 0
    RAISERROR('Balance cannot be negative', 16, 1);
ELSE
BEGIN
    INSERT INTO ACCOUNT (accno, open_date, acctype, balance)
    VALUES (@new_accno, @new_date, @new_type, @new_balance);

    INSERT INTO CUSTOMER (cust_id, name, address, accno)
    VALUES (111, 'Ravi', 'Kolhapur', @new_accno);
END
